{
  "swagger": "2.0",
  "info": {
    "title": "Users",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "user",
      "description": "Operations related to Users"
    }
  ],
  "basePath": "/",
  "paths": {
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users",
        "operationId": "get all users",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basic": [
              "read_users"
            ]
          }
        ],
        "parameters": [
          {
            "name": "maxCount",
            "in": "query",
            "description": "The maximum number of results to return",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The IDs include in the results",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "maxItems": 10,
            "items": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Comma-separated sorting fields (created only testing that query parameters are not split!)",
            "required": false,
            "type": "string",
            "enum": [
              "name,email"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Users response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "operationId": "create new user",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "security": [
          {
            "basic": [
              "create_user"
            ]
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The new user details to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users2": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all users",
        "operationId": "get all users (v2)",
        "security": [
          {
            "basic": [
              "read_users"
            ]
          }
        ],
        "parameters": [
          {
            "name": "maxCount",
            "in": "query",
            "description": "The maximum number of results to return",
            "required": false,
            "type": "integer",
            "format": "int32",
            "minimum": 1
          },
          {
            "name": "filter",
            "in": "query",
            "description": "The IDs include in the results",
            "required": false,
            "type": "array",
            "collectionFormat": "csv",
            "maxItems": 10,
            "items": {
              "type": "number",
              "format": "int32"
            }
          },
          {
            "name": "sorting",
            "in": "query",
            "description": "Comma-separated sorting fields (created only testing that query parameters are not split!)",
            "required": false,
            "type": "string",
            "enum": [
              "name,email"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Users response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthenticated"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create a new user",
        "operationId": "create new user (v2)",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basic": [
              "create_user"
            ]
          }
        ],
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "description": "The new user details to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a single user",
        "operationId": "get user by ID",
        "produces": [
          "application/json"
        ],
        "security": [
          {
            "basic": [
              "read_users"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to get",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid ID format",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthenticated access",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No user with the given ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a user's name",
        "operationId": "Update a user's name",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to get",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "The new email to set",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/secure/users/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a user's name",
        "operationId": "Get a user's name",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to get",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "security": [
          {
            "bearer": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update a user's name",
        "operationId": "Update a user's name (secure)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the user to update",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "security": [
          {
            "bearer": []
          },
          {
            "queryParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User response",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/secure/users/{id}/upload": {
      "post": {
        "tags": [
          "image"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the user",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": true,
            "type": "string"
          },
          {
            "name": "imageFile",
            "in": "formData",
            "description": "file to upload",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "Everything is ok"
          }
        }
      }
    },
    "/healthcheck": {
      "get": {
        "summary": "Healthcheck endpoint for the service",
        "operationId": "healthcheck",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "What type of healthcheck to perform",
            "required": true,
            "type": "string",
            "enum": [
              "deep",
              "shallow"
            ]
          },
          {
            "name": "x-max-timeout",
            "in": "header",
            "description": "How long to wait for downstream to response",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Everything is ok"
          },
          "500": {
            "description": "Healthcheck failed",
            "headers": {
              "X-Failure-Code": {
                "description": "Characterisation of the healthcheck failure.",
                "type": "integer",
                "minimum": 0.0,
                "required": true
              }
            }
          }
        }
      }
    },
    "/headers": {
      "get": {
        "summary": "Endpoint with required header",
        "operationId": "headers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-required-header",
            "in": "header",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "Everything is ok"
          }
        }
      }
    },
    "/extensions": {
      "get": {
        "summary": "Endpoint that uses extensions",
        "operationId": "extensions",
        "x-test-extension": "true",
        "responses": {
          "200": {
            "description": "Everything is ok"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "basic": {
      "x-authorize": "auth.js",
      "type": "basic",
      "scopes": {
        "read_users": "Read users",
        "create_user": "Create user"
      }
    },
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Authentication by a bearer token"
    },
    "queryParam": {
      "type": "apiKey",
      "name": "authorization",
      "in": "query",
      "description": "Authentication by a query parameter"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "NewUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "email"
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "title",
        "message"
      ]
    }
  }
}