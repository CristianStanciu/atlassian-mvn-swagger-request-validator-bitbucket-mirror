openapi: 3.0.0
servers:
  - url: http://{account}.myserver{realm}.com:{port}/
    variables:
      account:
        default: demo
      realm:
        default: ''
      port:
        default: 80
info:
  title: Users
  version: 1.0.0
  description: |
    An API used to drive tests.
    Lots of inconsistencies and odd design choices used to test edge cases -
    not recommended as a good example of API design :)
tags:
  - name: user
    description: Operations related to Users
paths:
  /users:
    get:
      tags:
        - user
      summary: Get all users
      operationId: get all users
      security:
        - basic:
            - read_users
      parameters:
        - name: maxCount
          in: query
          description: The maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
        - name: filter
          in: query
          description: The IDs include in the results
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: number
              format: int32
            maxItems: 10
        - name: sorting
          in: query
          description: >-
            Comma-separated sorting fields (created only for testing that query
            parameters are not split!)
          required: false
          schema:
            type: string
            enum:
              - 'name,email'
      responses:
        '200':
          description: Users response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthenticated
        default:
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - user
      summary: Create a new user
      operationId: create new user
      security:
        - basic:
            - create_user
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        description: The new user details to create
        required: true
  '/users/{id}':
    get:
      tags:
        - user
      summary: Get a single user
      operationId: get user by ID
      security:
        - basic:
            - read_users
      parameters:
        - name: id
          in: path
          description: The ID of the user to get
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthenticated access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No user with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - user
      summary: Update a user's name
      operationId: Update a user's name
      parameters:
        - name: id
          in: path
          description: The ID of the user to get
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  description: The new email to set
                  type: string
              required:
                - email
  '/secure/users/{id}':
    get:
      tags:
        - user
      summary: Get a user's name
      operationId: Get a user's name
      security:
        - bearer: []
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      summary: Update a user's name
      operationId: (Secure) Update a user's name
      security:
        - bearer: []
        - queryParam: []
      responses:
        '200':
          description: User response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    parameters:
      - name: id
        in: path
        description: The ID of the user
        required: true
        schema:
          type: integer
          format: int32
  '/secure/users/{id}/upload':
    post:
      tags:
        - image
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: id
          in: path
          description: ID of the user
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Everything is ok
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                additionalMetadata:
                  description: Additional data to pass to server
                  type: string
                imageFile:
                  description: file to upload
                  type: string
                  format: binary
              required:
                - additionalMetadata
                - imageFile
  /healthcheck:
    get:
      summary: Healthcheck endpoint for the service
      operationId: healthcheck
      parameters:
        - name: type
          in: query
          description: What type of healthcheck to perform
          required: true
          schema:
            type: string
            enum:
              - deep
              - shallow
        - name: x-max-timeout
          in: header
          description: How long to wait for downstream to response
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Everything is ok
        '500':
          description: Healthcheck failed
          headers:
            X-Failure-Code:
              description: Characterisation of the healthcheck failure.
              required: true
              schema:
                type: integer
                minimum: 0
  /headers:
    get:
      summary: Endpoint with required header
      operationId: headers
      parameters:
        - name: x-required-header
          in: header
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Everything is ok
  /extensions:
    get:
      summary: Endpoint that uses extensions
      operationId: extensions
      x-test-extension: 'true'
      responses:
        '200':
          description: Everything is ok
components:
  securitySchemes:
    basic:
      x-authorize: auth.js
      type: http
      scheme: basic
    bearer:
      type: apiKey
      name: Authorization
      in: header
      description: Authentication by a bearer token
    queryParam:
      type: apiKey
      name: authorization
      in: query
      description: Authentication by a query parameter
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
      required:
        - id
        - name
        - email
    NewUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email
    Error:
      type: object
      properties:
        title:
          type: string
        message:
          type: string
      required:
        - title
        - message
